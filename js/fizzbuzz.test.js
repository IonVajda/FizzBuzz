const {
  fizzbuzz,
  fizzbuzz2,
  fizzbuzz3,
  reverseFizzbuzz,
  fizzbuzz4,
} = require("./fizzbuzz");

//Step 1
test("Fizzbuz contains an array", () => {
  expect(fizzbuzz([])).toBeTruthy();
});

test("Multiples of 3 returns Fizz", () => {
  expect(fizzbuzz(1, 100)).toEqual([
    1,
    2,
    "Fizz",
    4,
    "Buzz",
    "Fizz",
    7,
    8,
    "Fizz",
    "Buzz",
    11,
    "Fizz",
    13,
    14,
    "FizzBuzz",
    16,
    17,
    "Fizz",
    19,
    "Buzz",
    "Fizz",
    22,
    23,
    "Fizz",
    "Buzz",
    26,
    "Fizz",
    28,
    29,
    "FizzBuzz",
    31,
    32,
    "Fizz",
    34,
    "Buzz",
    "Fizz",
    37,
    38,
    "Fizz",
    "Buzz",
    41,
    "Fizz",
    43,
    44,
    "FizzBuzz",
    46,
    47,
    "Fizz",
    49,
    "Buzz",
    "Fizz",
    52,
    53,
    "Fizz",
    "Buzz",
    56,
    "Fizz",
    58,
    59,
    "FizzBuzz",
    61,
    62,
    "Fizz",
    64,
    "Buzz",
    "Fizz",
    67,
    68,
    "Fizz",
    "Buzz",
    71,
    "Fizz",
    73,
    74,
    "FizzBuzz",
    76,
    77,
    "Fizz",
    79,
    "Buzz",
    "Fizz",
    82,
    83,
    "Fizz",
    "Buzz",
    86,
    "Fizz",
    88,
    89,
    "FizzBuzz",
    91,
    92,
    "Fizz",
    94,
    "Buzz",
    "Fizz",
    97,
    98,
    "Fizz",
    "Buzz",
  ]);
});

test("Multiples of 5 returns Buzz", () => {
  expect(fizzbuzz(1, 100)).toEqual([
    1,
    2,
    "Fizz",
    4,
    "Buzz",
    "Fizz",
    7,
    8,
    "Fizz",
    "Buzz",
    11,
    "Fizz",
    13,
    14,
    "FizzBuzz",
    16,
    17,
    "Fizz",
    19,
    "Buzz",
    "Fizz",
    22,
    23,
    "Fizz",
    "Buzz",
    26,
    "Fizz",
    28,
    29,
    "FizzBuzz",
    31,
    32,
    "Fizz",
    34,
    "Buzz",
    "Fizz",
    37,
    38,
    "Fizz",
    "Buzz",
    41,
    "Fizz",
    43,
    44,
    "FizzBuzz",
    46,
    47,
    "Fizz",
    49,
    "Buzz",
    "Fizz",
    52,
    53,
    "Fizz",
    "Buzz",
    56,
    "Fizz",
    58,
    59,
    "FizzBuzz",
    61,
    62,
    "Fizz",
    64,
    "Buzz",
    "Fizz",
    67,
    68,
    "Fizz",
    "Buzz",
    71,
    "Fizz",
    73,
    74,
    "FizzBuzz",
    76,
    77,
    "Fizz",
    79,
    "Buzz",
    "Fizz",
    82,
    83,
    "Fizz",
    "Buzz",
    86,
    "Fizz",
    88,
    89,
    "FizzBuzz",
    91,
    92,
    "Fizz",
    94,
    "Buzz",
    "Fizz",
    97,
    98,
    "Fizz",
    "Buzz",
  ]);
});

test("Multiples of both 3 and 5 returns FizzBuzz", () => {
  expect(fizzbuzz(1, 100)).toEqual([
    1,
    2,
    "Fizz",
    4,
    "Buzz",
    "Fizz",
    7,
    8,
    "Fizz",
    "Buzz",
    11,
    "Fizz",
    13,
    14,
    "FizzBuzz",
    16,
    17,
    "Fizz",
    19,
    "Buzz",
    "Fizz",
    22,
    23,
    "Fizz",
    "Buzz",
    26,
    "Fizz",
    28,
    29,
    "FizzBuzz",
    31,
    32,
    "Fizz",
    34,
    "Buzz",
    "Fizz",
    37,
    38,
    "Fizz",
    "Buzz",
    41,
    "Fizz",
    43,
    44,
    "FizzBuzz",
    46,
    47,
    "Fizz",
    49,
    "Buzz",
    "Fizz",
    52,
    53,
    "Fizz",
    "Buzz",
    56,
    "Fizz",
    58,
    59,
    "FizzBuzz",
    61,
    62,
    "Fizz",
    64,
    "Buzz",
    "Fizz",
    67,
    68,
    "Fizz",
    "Buzz",
    71,
    "Fizz",
    73,
    74,
    "FizzBuzz",
    76,
    77,
    "Fizz",
    79,
    "Buzz",
    "Fizz",
    82,
    83,
    "Fizz",
    "Buzz",
    86,
    "Fizz",
    88,
    89,
    "FizzBuzz",
    91,
    92,
    "Fizz",
    94,
    "Buzz",
    "Fizz",
    97,
    98,
    "Fizz",
    "Buzz",
  ]);
});

//Step 2
test("Multiples of 3 returns Fizz and multiples of 5 returns Buzz if the array.length is less or equal to 20", () => {
  expect(fizzbuzz(1, 20)).toEqual([
    1,
    2,
    "Fizz",
    4,
    "Buzz",
    "Fizz",
    7,
    8,
    "Fizz",
    "Buzz",
    11,
    "Fizz",
    13,
    14,
    "FizzBuzz",
    16,
    17,
    "Fizz",
    19,
    "Buzz",
  ]);
});

// Step 3
test("Multiples of 7 returns Foo, multiples of 11 returns Boo and multiples of both 7 and 11 returns FooBoo", () => {
  expect(fizzbuzz2(1, 100)).toEqual([
    1,
    2,
    3,
    4,
    5,
    6,
    "Foo",
    8,
    9,
    10,
    "Boo",
    12,
    13,
    "Foo",
    15,
    16,
    17,
    18,
    19,
    20,
    "Foo",
    "Boo",
    23,
    24,
    25,
    26,
    27,
    "Foo",
    29,
    30,
    31,
    32,
    "Boo",
    34,
    "Foo",
    36,
    37,
    38,
    39,
    40,
    41,
    "Foo",
    43,
    "Boo",
    45,
    46,
    47,
    48,
    "Foo",
    50,
    51,
    52,
    53,
    54,
    "Boo",
    "Foo",
    57,
    58,
    59,
    60,
    61,
    62,
    "Foo",
    64,
    65,
    "Boo",
    67,
    68,
    69,
    "Foo",
    71,
    72,
    73,
    74,
    75,
    76,
    "FooBoo",
    78,
    79,
    80,
    81,
    82,
    83,
    "Foo",
    85,
    86,
    87,
    "Boo",
    89,
    90,
    "Foo",
    92,
    93,
    94,
    95,
    96,
    97,
    "Foo",
    "Boo",
    100,
  ]);
});

//Step 4
test("For numbers smaller than 16 return Small and for numbers bigger than 95 which return Big", () => {
  expect(fizzbuzz3(1, 100)).toEqual([
    "Small",
    "Small",
    "Small",
    "Small",
    "Small",
    "Small",
    "Small",
    "Small",
    "Small",
    "Small",
    "Small",
    "Small",
    "Small",
    "Small",
    "Small",
    "Small",
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    "Big",
    "Big",
    "Big",
    "Big",
    "Big",
    "Big",
  ]);
});

// Step 5
test("Add ability to change rules for initial requirement, instead of Fizz (multiples of 3) return Buzz, and instead of Buzz (multiples of 5) return Fizz", () => {
  expect(reverseFizzbuzz(1, 100)).toEqual([
    1,
    2,
    "Buzz",
    4,
    "Fizz",
    "Buzz",
    7,
    8,
    "Buzz",
    "Fizz",
    11,
    "Buzz",
    13,
    14,
    "BizzFuzz",
    16,
    17,
    "Buzz",
    19,
    "Fizz",
    "Buzz",
    22,
    23,
    "Buzz",
    "Fizz",
    26,
    "Buzz",
    28,
    29,
    "BizzFuzz",
    31,
    32,
    "Buzz",
    34,
    "Fizz",
    "Buzz",
    37,
    38,
    "Buzz",
    "Fizz",
    41,
    "Buzz",
    43,
    44,
    "BizzFuzz",
    46,
    47,
    "Buzz",
    49,
    "Fizz",
    "Buzz",
    52,
    53,
    "Buzz",
    "Fizz",
    56,
    "Buzz",
    58,
    59,
    "BizzFuzz",
    61,
    62,
    "Buzz",
    64,
    "Fizz",
    "Buzz",
    67,
    68,
    "Buzz",
    "Fizz",
    71,
    "Buzz",
    73,
    74,
    "BizzFuzz",
    76,
    77,
    "Buzz",
    79,
    "Fizz",
    "Buzz",
    82,
    83,
    "Buzz",
    "Fizz",
    86,
    "Buzz",
    88,
    89,
    "BizzFuzz",
    91,
    92,
    "Buzz",
    94,
    "Fizz",
    "Buzz",
    97,
    98,
    "Buzz",
    "Fizz",
  ]);
});

// Step 6
test("For multiples of 3 and 5 return FTW, and for multiples of 3 or 5 return GG", () => {
  expect(fizzbuzz4(1, 100)).toEqual([
    1,
    2,
    "GG",
    4,
    "GG",
    "GG",
    7,
    8,
    "GG",
    "GG",
    11,
    "GG",
    13,
    14,
    "FTW",
    16,
    17,
    "GG",
    19,
    "GG",
    "GG",
    22,
    23,
    "GG",
    "GG",
    26,
    "GG",
    28,
    29,
    "FTW",
    31,
    32,
    "GG",
    34,
    "GG",
    "GG",
    37,
    38,
    "GG",
    "GG",
    41,
    "GG",
    43,
    44,
    "FTW",
    46,
    47,
    "GG",
    49,
    "GG",
    "GG",
    52,
    53,
    "GG",
    "GG",
    56,
    "GG",
    58,
    59,
    "FTW",
    61,
    62,
    "GG",
    64,
    "GG",
    "GG",
    67,
    68,
    "GG",
    "GG",
    71,
    "GG",
    73,
    74,
    "FTW",
    76,
    77,
    "GG",
    79,
    "GG",
    "GG",
    82,
    83,
    "GG",
    "GG",
    86,
    "GG",
    88,
    89,
    "FTW",
    91,
    92,
    "GG",
    94,
    "GG",
    "GG",
    97,
    98,
    "GG",
    "GG",
  ]);
});
